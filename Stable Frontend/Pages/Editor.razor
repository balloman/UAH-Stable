@page "/editor"
@inject IJSRuntime JSRunTime

<<<<<<< Updated upstream
<body>
    <div></div> 
=======
@if (EditorEnabled)
{
    <br />
    <button class="btn btn-primary" @onclick="GetText">Get Text</button>
    <button class="btn btn-primary" @onclick="GetHTML">Get HTML</button>
    <button class="btn btn-primary" @onclick="GetEditorContent">Get Content</button>
    <br />
>>>>>>> Stashed changes

    <br />
    <div>
        @EditorContent
    </div>
    <div>
        @((MarkupString)@EditorHTMLContent)
    </div>

    <br />
    <button class="btn btn-danger" @onclick="SaveContent">Save Content</button>
    <button class="btn btn-success" @onclick="LoadContent">Load Saved Content</button>
    <br />
    <br />
    <br />

    <div id="toolbar">
        <span class="ql-formats">
            <select class="ql-font">
                <option selected=""></option>
                <option value="serif"></option>
                <option value="monospace"></option>
            </select>
            <select class="ql-size">
                <option value="small"></option>
                <option selected=""></option>
                <option value="large"></option>
                <option value="huge"></option>
            </select>
        </span>
        <span class="ql-formats">
            <button class="q1-bold"></button>
            <button class="q1-italic"></button>
            <button class="q1-underline"></button>
            <button class="q1-strike"></button>
        </span>
        <span class="ql-formats">
            <select class="ql-color"></select>
            <select class="ql-background"></select>
        </span>
        <span class="ql-formats">
            <button class="q1-list" value="ordered"></button>
            <button class="q1-list" value="bullet"></button>
            <button class="q1-indent" value="-1"></button>
            <button class="q1-indent" value="+1"></button>
            <select class="ql-align">
                <option selected=""></option>
                <option value="center"></option>
                <option value="right"></option>
                <option value="justify"></option>
            </select>
        </span>
        <span class="ql-formats">
            <button class="ql-link"></button>
        </span>
    </div>


}
<div @ref="@divEditorElement" />


@code
{
    
    private string strSavedContent = "";
    private ElementReference divEditorElement;
    private string EditorContent;
    private string EditorHTMLContent;
    private bool EditorEnabled = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRunTime.InvokeAsync<string>("QuillFunctions.createQuill", divEditorElement);
        }
    }

    async Task GetText()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRunTime.InvokeAsync<string>("QuillFunctions.getQuillText", divEditorElement);
    }
    async Task GetHTML()
    {
        EditorContent = "";
        EditorHTMLContent = await JSRunTime.InvokeAsync<string>("QuillFunctions.getQuillHTML", divEditorElement);
    }
    async Task GetEditorContent()
    {
        EditorHTMLContent = "";
        EditorContent = await JSRunTime.InvokeAsync<string>("QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task SaveContent()
    {
        strSavedContent = await JSRunTime.InvokeAsync<string>("QuillFunctions.getQuillContent", divEditorElement);
    }
    async Task LoadContent()
    {
        var QuillDelta = await JSRunTime.InvokeAsync<string>("QuillFunctions.loadQuillContent", divEditorElement, strSavedContent);
    }
    
}